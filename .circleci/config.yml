# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  aws-eks: circleci/aws-eks@1.0.0
  kubernetes: circleci/kubernetes@0.11.1
  
# Orchestrate or schedule a set of jobs
      
jobs:
  lint:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |            
            make install
      - run:
          name: run lint
          command: |
            make lint
            
  build-test-push:
    machine: true
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Build, test and push docker image
          command: |
            docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PWD}
            docker build -t leenabhavnani/my-node-app:1.0 .
            docker run -d --rm --name nodeapp -p 8080:8080 leenabhavnani/my-node-app:1.0
            sleep 5
            docker container ls
            export url="http://localhost:8080"
            export response=$(curl -s $url)
            echo "This is response $response"
            if [[ $response == *"NodeJS app"* ]]; then
              
              docker stop nodeapp
            else
              
              docker stop nodeapp
              exit 1
            fi
            docker push leenabhavnani/my-node-app:1.0
            
  test-cluster:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster
            
          

workflows:
    udacity:
      jobs:
        - lint
        - build-test-push:
            requires:
              - lint
        - aws-eks/create-cluster:
            cluster-name: my-first-cluster
        - test-cluster:
            cluster-name: my-first-cluster
            requires:
              - aws-eks/create-cluster
        - aws-eks/delete-cluster:
            cluster-name: my-first-cluster
            requires:
              - test-cluster